/*===============================================================
Product:    Cryoshock
Developer:  Dimitry Pixeye - pixeye@hbrew.store
Company:    Homebrew - http://hbrew.store
Date:       2/9/2018  7:20 PM
================================================================*/


using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;
using UnityEngine.SceneManagement;


namespace Homebrew
{
	public class SaveSceneName
	{
		[MenuItem("Scenes Names/Save Scenes Names %Q")]
		public static void SaveScenesName()
		{
			string filePath = Path.GetFullPath(@"Assets/[-]Common/Scenes.cs");
			var assetPath = AssetDatabase.GenerateUniqueAssetPath("Assets/[-]Common/Scenes.cs");
		 
//			string assetPathAndName = AssetDatabase.GenerateUniqueAssetPath("Assets/" + p + "/" + n + ".asset");
			if (assetPath == String.Empty)
			{
				Directory.CreateDirectory(Application.dataPath + "/[-]Common");
		 
			}
			
			UTF8Encoding encoding = new UTF8Encoding(true, false);
			Regex regex = new Regex(@"([^/]*/)*([\w\d\-]*)\.unity");
			EditorBuildSettingsScene[] scenes = EditorBuildSettings.scenes;


			using (var tc = new StreamWriter(filePath, false, encoding))
			{
				tc.WriteLine(
					"/// This is autogenerated code. If you wish to edit this file press Scene Names -> Save scene names in options. ");
				tc.WriteLine("namespace Homebrew");
				tc.WriteLine("{");
				tc.WriteLine("public enum Scenes");
				tc.WriteLine("{");
				for (int i = 0; i < scenes.Length; ++i)
				{
					string t = i != scenes.Length - 1 ? "," : "";
					tc.WriteLine(regex.Replace(scenes[i].path, "$2") + " = " + i + t);
				}

				tc.WriteLine("}");
				tc.Write(
					"public static class ExtScenes	{	public static void To(this Scenes s)	{	ProcessingSceneLoad.To((int) s);	}}");
				tc.WriteLine("}");
			}

			AssetDatabase.SaveAssets();
			AssetDatabase.Refresh();


			for (int i = 0; i < scenes.Length; i++)
			{
				var name = regex.Replace(scenes[i].path, "$2");
				var v = ScriptableObjectUtility.CreateOrGetAsset<DataScene>("[2]Content/Scenes", "data_" + name);
				EditorUtility.SetDirty(v);
				v.sceneName = name;
			}

			AssetDatabase.SaveAssets();
			AssetDatabase.Refresh();
		}
	}
}